server <- function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
shiny::runApp('Downloads/downloads/code')
library(shiny)
runExample("03_reactivity")
print(source('Downloads/How-to-start-3/code/09-navbarMenu.R')$value)
print(source('Downloads/How-to-start-3/code/08-navbarPage.R')$value)
print(source('Downloads/How-to-start-3/code/08-navbarPage.R')$value)
print(source('Downloads/How-to-start-3/code/08-navbarPage copy.R')$value)
shiny::runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents')
runApp('Documents')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
shiny::runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents')
runApp('Downloads/shiny-examples-master/104-plot-interaction-select')
runApp('Downloads/shiny-examples-master/104-plot-interaction-select')
install.packages("Cairo")
runApp('Downloads/shiny-examples-master/104-plot-interaction-select')
runApp('Downloads/shiny-examples-master/104-plot-interaction-select')
install.packages("Cairo")
runApp('Downloads/shiny-examples-master/104-plot-interaction-select')
runApp('Downloads/shiny-examples-master/104-plot-interaction-select')
runApp('Downloads/shiny-examples-master/104-plot-interaction-select')
runApp('Downloads/shiny-examples-master/104-plot-interaction-select')
runApp('Documents/plotr')
runApp('Downloads/shiny-examples-master/094-image-interaction-basic')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents')
runApp('Documents')
install.packages("shinyAce")
runApp('Documents')
runApp('Documents/plotr')
runApp('Documents')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents')
runApp('Documents')
runApp('Documents')
install.packages("DT")
runApp('Documents')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
shiny::runApp('Documents/plotr')
runApp('Desktop/file')
runApp('Documents/plotr')
runApp('Documents')
runApp('Documents/plotr')
runApp('Documents/plotr')
shiny::runApp('Documents/plotr')
shiny::runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents')
runApp('Documents/plotr')
runApp('Documents/plotr')
shiny::runApp('Documents/plotr')
shiny::runApp('Documents/plotr')
runApp('Desktop/file')
runApp('Desktop/file')
runApp('Documents/plotr')
doInstall <- TRUE  # Change to FALSE if you don't want packages installed.
toInstall <- c("vcd", "ggplot2", "RColorBrewer")
if(doInstall){install.packages(toInstall, repos = "http://cran.us.r-project.org")}
lapply(toInstall, library, character.only = TRUE)
theme_set(theme_gray(base_size = 7))
# All you need to start with is individual count data, and a grouping variable
# here, a "count" of dollar salary, with individuals grouped by teams
baseballSalaries <- Baseball[, c("name2", "team87", "sal87", "years")]
# This data comes from the "vcd" package
baseballSalaries <- baseballSalaries[complete.cases(baseballSalaries), ]
# A handy function to know.
head(baseballSalaries)
### Need to calculate four things for each box ###
# Box width
baseballSalaries$team87 <- as.character(baseballSalaries$team87)  # Just to make sure things work right
baseballSalaries$width <- with(baseballSalaries, by(sal87, team87, sum, na.rm = T)[team87])
# Box height
baseballSalaries$height <- with(baseballSalaries, sal87 / width)
# Right edge
baseballSalaries$right <- with(baseballSalaries, cumsum(sort(by(sal87, team87, sum, na.rm = T)))[team87])
# Also a handy function, for a cumulative sum
# Top edge
baseballSalaries <- baseballSalaries[order(baseballSalaries$height), ]  # Order by height
# Lots of nested functions here, subjects of another Gist:
#                           1                         2      3     4
baseballSalaries$top <- with(baseballSalaries, unsplit(lapply(split(height, team87), cumsum), team87))
head(baseballSalaries)  # See what's been added
### Plot ###
# To produce a nice x-axis, find the center of each column:
xBreaks <- c(with(baseballSalaries, by(right - width / 2, team87, mean)))
xLabels <- names(xBreaks)
myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")))
zp1 <- ggplot(baseballSalaries,
aes(xmin = right - width,
xmax = right,
ymin = top - height,
ymax = top,
fill = log(years)))
zp1 <- zp1 + geom_rect(colour = "WHITE")
zp1 <- zp1 + scale_fill_gradientn(colours = myPalette(100))
zp1 <- zp1 + scale_y_continuous(expand = c(0, 0))
zp1 <- zp1 + scale_x_continuous(expand = c(0, 0),
breaks = xBreaks,  # Derived
labels = xLabels)  # above.
# We could add titles, names, labels, etc., but this Gist is already long enough
print(zp1)
###################
# Another example #
###################
# Another marimekko/mosaic plot, this is more like a stacked,
# variable width, bar plot
doInstall <- TRUE  # Change to FALSE if you don't want packages installed.
toInstall <- c("reshape", "ggplot2")
if(doInstall){install.packages(toInstall, repos = "http://cran.us.r-project.org")}
lapply(toInstall, library, character.only = TRUE)
# Canonical example of categorical data
HEC <- apply(HairEyeColor, c(1, 2), sum)
HEC <- melt(HEC)
HEC
### Need to calculate four things for each box ###
# Box width
HEC$Eye <- as.character(HEC$Eye)  # Just to make sure things work right
HEC$width <- with(HEC, by(value, Eye, sum, na.rm = T)[Eye])
# Box height
HEC$height <- with(HEC, value / width)
# Right edge
HEC$right <- with(HEC, cumsum(sort(by(value, Eye, sum, na.rm = T)))[Eye])
# Also a handy function, for a cumulative sum
# Top edge
HEC <- HEC[order(HEC$height), ]  # Order by height
# Lots of nested functions here, subjects of another Gist:
#                           1                         2      3     4
HEC$top <- with(HEC, unsplit(lapply(split(height, Eye), cumsum), Eye))
head(HEC)  # See what's been added
### Plot ###
# To produce a nice x-axis, find the center of each column:
xBreaks <- c(with(HEC, by(right - width / 2, Eye, mean)))
xLabels <- names(xBreaks)
zp2 <- ggplot(HEC,
aes(xmin = right - width,
xmax = right,
ymin = top - height,
ymax = top,
fill = Hair))
zp2 <- zp2 + geom_rect(colour = "WHITE")
zp2 <- zp2 + scale_fill_manual(values = colorRampPalette(rev(brewer.pal(11, "Spectral")))(nlevels(HEC$Hair)))
zp2 <- zp2 + scale_y_continuous(expand = c(0, 0))
zp2 <- zp2 + scale_x_continuous(expand = c(0, 0),
breaks = xBreaks,  # Derived
labels = xLabels)  # above.
print(zp2)
install.packages(toInstall, repos = "http://cran.us.r-project.org")
install.packages(toInstall, repos = "http://cran.us.r-project.org")
doInstall <- TRUE  # Change to FALSE if you don't want packages installed.
toInstall <- c("vcd", "ggplot2", "RColorBrewer")
if(doInstall){install.packages(toInstall, repos = "http://cran.us.r-project.org")}
shiny::runApp('Documents/plotr')
runApp('Desktop/file')
runApp('Desktop/file')
runApp('Desktop/file')
runApp('Desktop/file')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Desktop/file')
runApp('Documents/plotr')
read.csv(2010cars.csv)
read.csv('2010cars.csv')
filedata <- reactive({
infile <- input$datafile
if (is.null(infile)) {
# User has not uploaded a file yet
return(NULL)
}
dataframe <- read.csv(infile$datapath)
return(dataframe)
})
input$datafile = 2010cars.csv
runApp('Desktop/file')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
str(color)
library(shiny)
library(ezplot)
library(ggplot2)
shinyServer(
function(input, output) {
filedata <- reactive({
infile <- input$datafile
if (is.null(infile)) {
# User has not uploaded a file yet
return(NULL)
}
dataframe <- read.csv(infile$datapath)
return(dataframe)
})
#output yvar
output$yvar <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
items=names(df)
names(items)=items
selectInput("yvar", "Response Variable:",items)
})
#output xvars
output$xvar <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
items=names(df)
names(items)=items
selectizeInput("xvar", "Explanatory Variables:",items)
})
#output color
output$color <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
items=names(df)
names(items)=items
if(input$plot_type == "Scatterplot"){
selectInput("color", "Color:",items)
}
})
#download
output$getPlot <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
downloadButton('download', 'Download Plot')
})
#select plot type
output$plot_type <- renderUI({
df <-filedata()
if (is.null(df)) return(NULL)
radioButtons("plot_type", "Plot Type",
c("Histogram", "QQ plot", "Barplot of frequencies",
"Scatterplot","Boxplot","Mosaic Plot"),
selected = NULL)
})
output$download <- downloadHandler(
filename = function() { paste(input$dataset, '.png', sep='') },
content = function(file) {
ggsave(file, plot = output$plot, device = "png")
}
)
output$download <- downloadHandler(
filename =  function() {
paste(input$plot_type,".png")
},
content = function(file){
ggsave(file, plot = plotInput(), device = "png")
}
)
output$plot <- renderPlot({
print(plotInput())
})
plotInput <- function(){
#Plots
if (input$plot_type == "Histogram"){
plt = mk_distplot(filedata())
title = paste('Number of',input$xvar )
p = plt(input$xvar, binw=0.3, xlab=input$xvar, main=title,
add_vline_mean=T, add_vline_median=T)
}else if(input$plot_type == "QQ plot"){
#ggplot(filedata(), aes(sample = xvar)) + stat_qq()+
#geom_abline(intercept = 0, slope = 1,
#color = "red", linetype = "dashed",
#size = 1)+
#ylab(input$xvar)
}else if(input$plot_type == "Barplot of frequencies"){
data(filedata())
str(filedata())
f = tally1way(filedata())
df = f(input$xvar)
df
title = paste('Frequencies of Each', input$xvar)
plt = mk_barplot(df)
p = plt(input$xvar,'pct', fillby=input$xvar,
xlab = input$xvar, main=title, legend=F)
p = scale_axis(p, scale="comma")
}else if(input$plot_type == "Scatterplot"){
plt = mk_scatterplot(filedata())
color = factor(input$color, levels = c(1,0), labels = c("yes","no"))
purple = cb_color("reddish_purple")
green = cb_color("bluish_green")
title = paste(input$yvar,'vs', input$xvar)
p = plt(xvar=input$xvar, yvar=input$yvar,fillby=color, xlab=input$xvar,
ylab=input$yvar, main=title,
pt_size=1.2, pt_alpha=0.5, add_line=T) # use log10 scale on both axes
p = scale_axis(p, scale="log10") # default is y-axis p = scale_axis(p, axis="x", scale="log10")
p = p + ggplot2::scale_color_manual(values = c(purple, green))
# display plot
print(p)
}else if(input$plot_type == "Boxplot"){
plt = mk_boxplot(filedata())
title = paste('Distribution of',input$yvar)
red = cb_color("vermilion")
green = cb_color("bluish_green")
purple = cb_color("reddish_purple")
blue = cb_color("blue")
p = plt(input$xvar, input$yvar, xlab=input$xvar,ylab=input$yvar,
main=title, lab_at_top = F,vpos = -0.5, legend=F)
p = scale_axis(p, scale = "log10")
p = p + ggplot2::scale_fill_manual(values = c(red, green, purple, blue))
print(p)
}else if (input$plot_type == "Mosaic Plot"){
}
}
})
str(color)
runApp('Documents/plotr')
runApp('Documents/plotr')
read.csv("cars2010.csv")
runApp('Documents/plotr')
dat <- data.frame(x=runif(10),y=runif(10),
grp = rep(LETTERS[1:5],each = 2),stringsAsFactors = TRUE)
dat
library(RColorBrewer)
myColors <- brewer.pal(5,"Set1")
myColors
names(myColors) <- levels(dat$grp)
colScale <- scale_colour_manual(name = "grp",values = myColors)
p <- ggplot(dat,aes(x,y,colour = grp)) + geom_point()
p1 <- p + colScale
p2 <- p %+% droplevels(subset(dat[4:10,])) + colScale
print(p1)
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents')
runApp('Documents')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents')
runApp('Documents/plotr')
runApp('Documents/plotr')
runApp('Documents')
runApp('Documents/plotr')
runApp('Documents/plotr')
